# 1 "lexer.mll"
 
  (* Ici on défini tout le code OCaml executé avant le Lexer.
     Le "open Parser" permet de définir les tokens.
  *)
  open Parser
  exception Lexing_error of char
    
  let kwd_tbl = [
  "true", TRUE;
  "false", FALSE;
  "int", INT;
  "char", CHAR;
  "void", VOID;
  "return", RETURN;
  "if", IF;
  "else", ELSE;
  "while", WHILE; 
  "continue", CONTINUE;
  "break", BREAK; 
  ]
  let id_or_kwd s = try List.assoc s kwd_tbl with _ -> IDENT s

# 25 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\229\255\230\255\078\000\002\000\003\000\237\255\238\255\
    \239\255\240\255\012\000\001\000\030\000\246\255\248\255\249\255\
    \031\000\251\255\252\255\253\255\089\000\105\000\255\255\001\000\
    \004\000\011\000\250\255\245\255\242\255\241\255\236\255\235\255\
    ";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\024\000\022\000\021\000\255\255\255\255\
    \255\255\255\255\026\000\023\000\011\000\255\255\255\255\255\255\
    \012\000\255\255\255\255\255\255\001\000\008\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_default =
   "\001\000\000\000\000\000\255\255\255\255\255\255\000\000\000\000\
    \000\000\000\000\255\255\255\255\255\255\000\000\000\000\000\000\
    \255\255\000\000\000\000\000\000\255\255\255\255\000\000\023\000\
    \024\000\024\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\022\000\022\000\022\000\000\000\022\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \022\000\016\000\000\000\000\000\000\000\013\000\011\000\028\000\
    \009\000\008\000\014\000\017\000\018\000\015\000\025\000\021\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\022\000\019\000\005\000\012\000\004\000\031\000\
    \030\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\027\000\026\000\000\000\000\000\020\000\
    \000\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\007\000\010\000\006\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \029\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\024\000\000\000\000\000\000\000\000\000\
    \023\000\000\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\000\000\000\000\000\000\000\000\
    \020\000\000\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\255\255\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\023\000\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\255\255\255\255\255\255\000\000\000\000\011\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\024\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\025\000\000\000\000\000\000\000\000\000\004\000\
    \005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\012\000\016\000\255\255\255\255\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \010\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\021\000\255\255\255\255\255\255\255\255\
    \021\000\255\255\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\255\255\255\255\255\255\255\255\
    \020\000\255\255\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\023\000\255\255\255\255\024\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\025\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec read lexbuf =
   __ocaml_lex_read_rec lexbuf 0
and __ocaml_lex_read_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 50 "lexer.mll"
            ( read lexbuf )
# 160 "lexer.ml"

  | 1 ->
let
# 51 "lexer.mll"
             id
# 166 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 51 "lexer.mll"
                ( id_or_kwd id )
# 170 "lexer.ml"

  | 2 ->
# 52 "lexer.mll"
            ( SEMICOLON )
# 175 "lexer.ml"

  | 3 ->
# 53 "lexer.mll"
            ( COMMA )
# 180 "lexer.ml"

  | 4 ->
# 54 "lexer.mll"
            ( PLUS )
# 185 "lexer.ml"

  | 5 ->
# 55 "lexer.mll"
            ( NEQ )
# 190 "lexer.ml"

  | 6 ->
# 56 "lexer.mll"
            ( MINUS )
# 195 "lexer.ml"

  | 7 ->
# 57 "lexer.mll"
            ( TIMES )
# 200 "lexer.ml"

  | 8 ->
# 58 "lexer.mll"
            ( DIV )
# 205 "lexer.ml"

  | 9 ->
# 59 "lexer.mll"
            ( MOD )
# 210 "lexer.ml"

  | 10 ->
# 60 "lexer.mll"
            ( EQQ )
# 215 "lexer.ml"

  | 11 ->
# 61 "lexer.mll"
            ( EQ )
# 220 "lexer.ml"

  | 12 ->
# 62 "lexer.mll"
            ( NOT )
# 225 "lexer.ml"

  | 13 ->
# 63 "lexer.mll"
            ( AND )
# 230 "lexer.ml"

  | 14 ->
# 64 "lexer.mll"
            ( OR )
# 235 "lexer.ml"

  | 15 ->
# 65 "lexer.mll"
            ( LP )
# 240 "lexer.ml"

  | 16 ->
# 66 "lexer.mll"
            ( RP )
# 245 "lexer.ml"

  | 17 ->
# 67 "lexer.mll"
            ( LCB )
# 250 "lexer.ml"

  | 18 ->
# 68 "lexer.mll"
            ( RCB )
# 255 "lexer.ml"

  | 19 ->
# 69 "lexer.mll"
            ( LEQ )
# 260 "lexer.ml"

  | 20 ->
# 70 "lexer.mll"
            ( GEQ )
# 265 "lexer.ml"

  | 21 ->
# 71 "lexer.mll"
            ( LE )
# 270 "lexer.ml"

  | 22 ->
# 72 "lexer.mll"
            ( GE )
# 275 "lexer.ml"

  | 23 ->
# 73 "lexer.mll"
            ( AMP )
# 280 "lexer.ml"

  | 24 ->
let
# 74 "lexer.mll"
               s
# 286 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 74 "lexer.mll"
                 ( INTEGER (int_of_string s) )
# 290 "lexer.ml"

  | 25 ->
# 75 "lexer.mll"
            ( EOF )
# 295 "lexer.ml"

  | 26 ->
let
# 76 "lexer.mll"
         c
# 301 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 76 "lexer.mll"
            ( raise (Lexing_error c) )
# 305 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_read_rec lexbuf __ocaml_lex_state

;;

